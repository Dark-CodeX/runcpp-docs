import{_ as e,o as a,c as o,V as t}from"./chunks/framework.7ae304b1.js";const m=JSON.parse('{"title":"Introduction","description":"","frontmatter":{},"headers":[],"relativePath":"guide/introduction.md","filePath":"guide/introduction.md","lastUpdated":null}'),i={name:"guide/introduction.md"},n=t('<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">â€‹</a></h1><h2 id="what-is-runcpp" tabindex="-1">What is <code>RUNCPP</code>? <a class="header-anchor" href="#what-is-runcpp" aria-label="Permalink to &quot;What is `RUNCPP`?&quot;">â€‹</a></h2><p><code>RUNCPP</code> is a CLI tool, which is used to facilitates the task of compiling, interpreting or generating non-source files out of source files.</p><h2 id="is-runcpp-cross-platform" tabindex="-1">Is <code>RUNCPP</code> cross-platform? <a class="header-anchor" href="#is-runcpp-cross-platform" aria-label="Permalink to &quot;Is `RUNCPP` cross-platform?&quot;">â€‹</a></h2><p>Yes, <code>RUNCPP</code> is cross-platform, which means it runs on Windows, MacOS and GNU/Linux.</p><h2 id="what-are-the-features-of-runcpp" tabindex="-1">What are the features of <code>RUNCPP</code>? <a class="header-anchor" href="#what-are-the-features-of-runcpp" aria-label="Permalink to &quot;What are the features of `RUNCPP`?&quot;">â€‹</a></h2><ul><li>Comments</li><li>Import another file</li><li>Better syntax and logical error detection</li><li>Cross-platform</li><li>Optimized and fast</li><li>Memory safe</li><li>Target calling</li><li>Get target&#39;s particular values using indexes</li><li>Run and parse other program&#39;s output using <code>shell</code></li><li>Dependency checker using <code>depends</code></li><li>Compiles on <code>g++</code>, <code>clang++</code>, <code>mingw</code> and <code>msvc</code></li><li>Custom written lexer and parser</li><li>Serialization and deserialization for faster execution of commands</li><li>If-else statements</li></ul><h2 id="is-runcpp-efficient" tabindex="-1">Is <code>RUNCPP</code> efficient? ðŸ”¥ <a class="header-anchor" href="#is-runcpp-efficient" aria-label="Permalink to &quot;Is `RUNCPP` efficient? :fire:&quot;">â€‹</a></h2><p>Yes, <code>RUNCPP</code> is very efficient, it can start building your project in less than a second for a config file of around 50,000 lines of instructions.</p><h2 id="is-config-syntax-easy-to-learn" tabindex="-1">Is config syntax easy-to-learn? <a class="header-anchor" href="#is-config-syntax-easy-to-learn" aria-label="Permalink to &quot;Is config syntax easy-to-learn?&quot;">â€‹</a></h2><p>Yes, <code>RUNCPP</code>&#39;s config syntax is easy-to-learn and doesn&#39;t need any special programming skills.</p><h2 id="can-it-be-used-instead-of-make" tabindex="-1">Can it be used instead of <code>make</code>? <a class="header-anchor" href="#can-it-be-used-instead-of-make" aria-label="Permalink to &quot;Can it be used instead of `make`?&quot;">â€‹</a></h2><p>No, <code>make</code> is still a powerful tool compared to <code>RUNCPP</code>, but still I&#39;m trying to advance it.</p>',13),s=[n];function r(c,d,l,u,f,h){return a(),o("div",null,s)}const P=e(i,[["render",r]]);export{m as __pageData,P as default};
